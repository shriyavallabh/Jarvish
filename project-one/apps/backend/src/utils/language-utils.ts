// Multi-language Support Utilities
// Financial terminology mapping and translation helpers

export type SupportedLanguage = 'en' | 'hi' | 'mr';

// Financial terms dictionary
const FINANCIAL_TERMS: Record<string, Record<SupportedLanguage, string>> = {
  // Risk Disclaimers
  'market_risk_disclaimer': {
    en: 'Mutual fund investments are subject to market risks, read all scheme related documents carefully.',
    hi: '‡§Æ‡•ç‡§Ø‡•Ç‡§ö‡•Å‡§Ö‡§≤ ‡§´‡§Ç‡§° ‡§®‡§ø‡§µ‡•á‡§∂ ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§ú‡•ã‡§ñ‡§ø‡§Æ‡•ã‡§Ç ‡§ï‡•á ‡§Ö‡§ß‡•Ä‡§® ‡§π‡•à‡§Ç, ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡•Ä ‡§∏‡§≠‡•Ä ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡•ã‡§Ç ‡§ï‡•ã ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§∏‡•á ‡§™‡§¢‡§º‡•á‡§Ç‡•§',
    mr: '‡§Æ‡•ç‡§Ø‡•Å‡§ö‡•ç‡§Ø‡•Å‡§Ö‡§≤ ‡§´‡§Ç‡§° ‡§ó‡•Å‡§Ç‡§§‡§µ‡§£‡•Ç‡§ï ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§ú‡•ã‡§ñ‡§Æ‡•Ä‡§ö‡•ç‡§Ø‡§æ ‡§Ö‡§ß‡•Ä‡§® ‡§Ü‡§π‡•á, ‡§∏‡§∞‡•ç‡§µ ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§æ‡§ó‡§¶‡§™‡§§‡•ç‡§∞‡•á ‡§ï‡§æ‡§≥‡§ú‡•Ä‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§µ‡§æ‡§ö‡§æ.'
  },
  'past_performance_disclaimer': {
    en: 'Past performance is not indicative of future results.',
    hi: '‡§™‡§ø‡§õ‡§≤‡§æ ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø ‡§ï‡•á ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ‡•ã‡§Ç ‡§ï‡§æ ‡§∏‡§Ç‡§ï‡•á‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§',
    mr: '‡§Æ‡§æ‡§ó‡•Ä‡§≤ ‡§ï‡§æ‡§Æ‡§ó‡§ø‡§∞‡•Ä ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§æ‡§§‡•Ä‡§≤ ‡§®‡§ø‡§ï‡§æ‡§≤‡§æ‡§Ç‡§ö‡•á ‡§∏‡•Ç‡§ö‡§ï ‡§®‡§æ‡§π‡•Ä.'
  },
  'insurance_disclaimer': {
    en: 'Insurance is the subject matter of solicitation.',
    hi: '‡§¨‡•Ä‡§Æ‡§æ ‡§Ø‡§æ‡§ö‡§®‡§æ ‡§ï‡•Ä ‡§µ‡§ø‡§∑‡§Ø ‡§µ‡§∏‡•ç‡§§‡•Å ‡§π‡•à‡•§',
    mr: '‡§µ‡§ø‡§Æ‡§æ ‡§π‡•Ä ‡§Ø‡§æ‡§ö‡§®‡•á‡§ö‡•Ä ‡§µ‡§ø‡§∑‡§Ø‡§µ‡§∏‡•ç‡§§‡•Ç ‡§Ü‡§π‡•á.'
  },
  'investment_advice_disclaimer': {
    en: 'This is for educational purposes only and not investment advice.',
    hi: '‡§Ø‡§π ‡§ï‡•á‡§µ‡§≤ ‡§∂‡•à‡§ï‡•ç‡§∑‡§£‡§ø‡§ï ‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à ‡§î‡§∞ ‡§®‡§ø‡§µ‡•á‡§∂ ‡§∏‡§≤‡§æ‡§π ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§',
    mr: '‡§π‡•á ‡§ï‡•á‡§µ‡§≥ ‡§∂‡•à‡§ï‡•ç‡§∑‡§£‡§ø‡§ï ‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡§æ‡§Ç‡§∏‡§æ‡§†‡•Ä ‡§Ü‡§π‡•á ‡§Ü‡§£‡§ø ‡§ó‡•Å‡§Ç‡§§‡§µ‡§£‡•Ç‡§ï ‡§∏‡§≤‡•ç‡§≤‡§æ ‡§®‡§æ‡§π‡•Ä.'
  },

  // Common Financial Terms
  'mutual_fund': {
    en: 'Mutual Fund',
    hi: '‡§Æ‡•ç‡§Ø‡•Ç‡§ö‡•Å‡§Ö‡§≤ ‡§´‡§Ç‡§°',
    mr: '‡§Æ‡•ç‡§Ø‡•Å‡§ö‡•ç‡§Ø‡•Å‡§Ö‡§≤ ‡§´‡§Ç‡§°'
  },
  'sip': {
    en: 'Systematic Investment Plan (SIP)',
    hi: '‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§ø‡§§ ‡§®‡§ø‡§µ‡•á‡§∂ ‡§Ø‡•ã‡§ú‡§®‡§æ (SIP)',
    mr: '‡§™‡§¶‡•ç‡§ß‡§§‡§∂‡•Ä‡§∞ ‡§ó‡•Å‡§Ç‡§§‡§µ‡§£‡•Ç‡§ï ‡§Ø‡•ã‡§ú‡§®‡§æ (SIP)'
  },
  'returns': {
    en: 'Returns',
    hi: '‡§∞‡§ø‡§ü‡§∞‡•ç‡§®',
    mr: '‡§™‡§∞‡§§‡§æ‡§µ‡§æ'
  },
  'risk': {
    en: 'Risk',
    hi: '‡§ú‡•ã‡§ñ‡§ø‡§Æ',
    mr: '‡§ú‡•ã‡§ñ‡•Ä‡§Æ'
  },
  'investment': {
    en: 'Investment',
    hi: '‡§®‡§ø‡§µ‡•á‡§∂',
    mr: '‡§ó‡•Å‡§Ç‡§§‡§µ‡§£‡•Ç‡§ï'
  },
  'portfolio': {
    en: 'Portfolio',
    hi: '‡§™‡•ã‡§∞‡•ç‡§ü‡§´‡•ã‡§≤‡§ø‡§Ø‡•ã',
    mr: '‡§™‡•ã‡§∞‡•ç‡§ü‡§´‡•ã‡§≤‡§ø‡§ì'
  },
  'equity': {
    en: 'Equity',
    hi: '‡§á‡§ï‡•ç‡§µ‡§ø‡§ü‡•Ä',
    mr: '‡§á‡§ï‡•ç‡§µ‡§ø‡§ü‡•Ä'
  },
  'debt': {
    en: 'Debt',
    hi: '‡§°‡•á‡§ü',
    mr: '‡§ï‡§∞‡•ç‡§ú'
  },
  'advisor': {
    en: 'Financial Advisor',
    hi: '‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§∏‡§≤‡§æ‡§π‡§ï‡§æ‡§∞',
    mr: '‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§∏‡§≤‡•ç‡§≤‡§æ‡§ó‡§æ‡§∞'
  },
  'disclaimer': {
    en: 'Disclaimer',
    hi: '‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§∞‡§£',
    mr: '‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§∞‡§£'
  }
};

// Common compliance phrases
const COMPLIANCE_PHRASES: Record<string, Record<SupportedLanguage, string>> = {
  'subject_to_market_risks': {
    en: 'subject to market risks',
    hi: '‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§ú‡•ã‡§ñ‡§ø‡§Æ‡•ã‡§Ç ‡§ï‡•á ‡§Ö‡§ß‡•Ä‡§®',
    mr: '‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§ú‡•ã‡§ñ‡§Æ‡•Ä‡§ö‡•ç‡§Ø‡§æ ‡§Ö‡§ß‡•Ä‡§®'
  },
  'read_carefully': {
    en: 'read all documents carefully',
    hi: '‡§∏‡§≠‡•Ä ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡•ã‡§Ç ‡§ï‡•ã ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§∏‡•á ‡§™‡§¢‡§º‡•á‡§Ç',
    mr: '‡§∏‡§∞‡•ç‡§µ ‡§ï‡§æ‡§ó‡§¶‡§™‡§§‡•ç‡§∞‡•á ‡§ï‡§æ‡§≥‡§ú‡•Ä‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§µ‡§æ‡§ö‡§æ'
  },
  'consult_advisor': {
    en: 'consult your financial advisor',
    hi: '‡§Ö‡§™‡§®‡•á ‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§∏‡§≤‡§æ‡§π‡§ï‡§æ‡§∞ ‡§∏‡•á ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂ ‡§ï‡§∞‡•á‡§Ç',
    mr: '‡§Ü‡§™‡§≤‡•ç‡§Ø‡§æ ‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§∏‡§≤‡•ç‡§≤‡§æ‡§ó‡§æ‡§∞‡§æ‡§ö‡§æ ‡§∏‡§≤‡•ç‡§≤‡§æ ‡§ò‡•ç‡§Ø‡§æ'
  },
  'tax_implications': {
    en: 'tax implications may vary',
    hi: '‡§ï‡§∞ ‡§®‡§ø‡§π‡§ø‡§§‡§æ‡§∞‡•ç‡§• ‡§≠‡§ø‡§®‡•ç‡§® ‡§π‡•ã ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç',
    mr: '‡§ï‡§∞ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§¨‡§¶‡§≤‡•Ç ‡§∂‡§ï‡§§‡§æ‡§§'
  }
};

export class LanguageUtils {
  /**
   * Detect language from content
   */
  detectLanguage(content: string): SupportedLanguage {
    // Hindi detection
    if (/[\u0900-\u097F]/.test(content)) {
      return 'hi';
    }
    
    // Marathi detection (overlaps with Hindi, so check specific words)
    const marathiIndicators = ['‡§Ü‡§π‡•á', '‡§π‡•ã‡§§‡•á', '‡§ï‡§∞‡§æ', '‡§Ü‡§£‡§ø', '‡§ï‡§ø‡§Ç‡§µ‡§æ'];
    if (marathiIndicators.some(word => content.includes(word))) {
      return 'mr';
    }
    
    // Default to English
    return 'en';
  }

  /**
   * Get disclaimer in specified language
   */
  getDisclaimer(
    type: 'market_risk' | 'past_performance' | 'insurance' | 'investment_advice',
    language: SupportedLanguage
  ): string {
    const key = `${type}_disclaimer`;
    return FINANCIAL_TERMS[key]?.[language] || FINANCIAL_TERMS[key]?.en || '';
  }

  /**
   * Translate financial term
   */
  translateTerm(term: string, targetLanguage: SupportedLanguage): string {
    const normalizedTerm = term.toLowerCase().replace(/\s+/g, '_');
    return FINANCIAL_TERMS[normalizedTerm]?.[targetLanguage] || term;
  }

  /**
   * Add language-appropriate disclaimer to content
   */
  addDisclaimer(
    content: string,
    disclaimerType: string,
    language: SupportedLanguage
  ): string {
    const disclaimer = this.getDisclaimer(disclaimerType as any, language);
    
    if (!disclaimer) return content;

    // Add disclaimer with appropriate formatting
    const separator = language === 'en' ? '\n\n' : '\n\n';
    const prefix = language === 'en' ? 'üìã ' : '';
    
    return `${content}${separator}${prefix}${disclaimer}`;
  }

  /**
   * Check if content has required disclaimer
   */
  hasDisclaimer(content: string, disclaimerType: string): boolean {
    const lowerContent = content.toLowerCase();
    
    // Check in all languages
    const languages: SupportedLanguage[] = ['en', 'hi', 'mr'];
    
    for (const lang of languages) {
      const disclaimer = this.getDisclaimer(disclaimerType as any, lang);
      if (disclaimer && lowerContent.includes(disclaimer.toLowerCase().substring(0, 20))) {
        return true;
      }
    }
    
    return false;
  }

  /**
   * Format number in Indian numbering system
   */
  formatIndianNumber(num: number, language: SupportedLanguage = 'en'): string {
    const formatter = new Intl.NumberFormat('en-IN');
    const formatted = formatter.format(num);
    
    if (language === 'hi' || language === 'mr') {
      // Add lakh/crore labels
      if (num >= 10000000) {
        return `${(num / 10000000).toFixed(2)} ‡§ï‡§∞‡•ã‡§°‡§º`;
      } else if (num >= 100000) {
        return `${(num / 100000).toFixed(2)} ‡§≤‡§æ‡§ñ`;
      }
    }
    
    return formatted;
  }

  /**
   * Clean content for compliance checking
   */
  normalizeContent(content: string): string {
    return content
      .toLowerCase()
      .replace(/\s+/g, ' ')
      .replace(/[^\w\s\u0900-\u097F\u0964\u0965]/g, '') // Keep Hindi/Devanagari chars
      .trim();
  }

  /**
   * Extract financial amounts from content
   */
  extractAmounts(content: string): Array<{ amount: number; context: string }> {
    const amounts: Array<{ amount: number; context: string }> = [];
    
    // Pattern for Indian currency format
    const patterns = [
      /‚Çπ\s*([\d,]+(?:\.\d{2})?)/g,
      /Rs\.?\s*([\d,]+(?:\.\d{2})?)/gi,
      /([\d,]+(?:\.\d{2})?)\s*(?:rupees?|rs)/gi,
      /([\d,]+)\s*(?:lakh|lac|crore|cr)/gi
    ];
    
    patterns.forEach(pattern => {
      let match;
      while ((match = pattern.exec(content)) !== null) {
        const value = match[1].replace(/,/g, '');
        const amount = parseFloat(value);
        
        if (!isNaN(amount)) {
          // Get context (20 chars before and after)
          const start = Math.max(0, match.index - 20);
          const end = Math.min(content.length, match.index + match[0].length + 20);
          const context = content.substring(start, end);
          
          amounts.push({ amount, context });
        }
      }
    });
    
    return amounts;
  }

  /**
   * Generate language-specific compliance suggestions
   */
  getComplianceSuggestions(
    violations: any[],
    language: SupportedLanguage
  ): string[] {
    const suggestions: string[] = [];
    
    const templates = {
      en: {
        addDisclaimer: 'Add disclaimer: ',
        removePhrase: 'Remove phrase: ',
        replaceWith: 'Replace with: ',
        addIdentity: 'Include advisor ARN/RIA number'
      },
      hi: {
        addDisclaimer: '‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§∞‡§£ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç: ',
        removePhrase: '‡§µ‡§æ‡§ï‡•ç‡§Ø‡§æ‡§Ç‡§∂ ‡§π‡§ü‡§æ‡§è‡§Ç: ',
        replaceWith: '‡§á‡§∏‡§∏‡•á ‡§¨‡§¶‡§≤‡•á‡§Ç: ',
        addIdentity: '‡§∏‡§≤‡§æ‡§π‡§ï‡§æ‡§∞ ARN/RIA ‡§®‡§Ç‡§¨‡§∞ ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç'
      },
      mr: {
        addDisclaimer: '‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§∞‡§£ ‡§ú‡•ã‡§°‡§æ: ',
        removePhrase: '‡§µ‡§æ‡§ï‡•ç‡§Ø ‡§ï‡§æ‡§¢‡§æ: ',
        replaceWith: '‡§Ø‡§æ‡§®‡•á ‡§¨‡§¶‡§≤‡§æ: ',
        addIdentity: '‡§∏‡§≤‡•ç‡§≤‡§æ‡§ó‡§æ‡§∞ ARN/RIA ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï ‡§∏‡§Æ‡§æ‡§µ‡§ø‡§∑‡•ç‡§ü ‡§ï‡§∞‡§æ'
      }
    };
    
    const lang = templates[language] || templates.en;
    
    violations.forEach(violation => {
      if (violation.code?.includes('MISSING_DISC')) {
        suggestions.push(lang.addDisclaimer + this.getDisclaimer('market_risk', language));
      }
      if (violation.code?.includes('GUARANTEE')) {
        suggestions.push(lang.removePhrase + '"guaranteed returns"');
      }
      if (violation.code?.includes('ADVISOR_ID')) {
        suggestions.push(lang.addIdentity);
      }
    });
    
    return suggestions;
  }

  /**
   * Check for language mixing (code-mixing)
   */
  detectCodeMixing(content: string): {
    hasCodeMixing: boolean;
    languages: SupportedLanguage[];
  } {
    const languages: Set<SupportedLanguage> = new Set();
    
    // Check for English
    if (/[a-zA-Z]{3,}/.test(content)) {
      languages.add('en');
    }
    
    // Check for Hindi/Devanagari
    if (/[\u0900-\u097F]/.test(content)) {
      languages.add('hi');
      // Could also be Marathi, need deeper analysis
    }
    
    return {
      hasCodeMixing: languages.size > 1,
      languages: Array.from(languages)
    };
  }
}

export default new LanguageUtils();