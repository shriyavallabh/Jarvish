name: Deploy JARVISH Platform

on:
  push:
    branches:
      - main
      - staging
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Code Quality & Testing
  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run linting
        run: pnpm run lint
      
      - name: Run type checking
        run: pnpm run type-check
      
      - name: Run tests
        run: pnpm run test:ci
        env:
          CI: true
      
      - name: Run compliance checks
        run: pnpm run compliance:check
      
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run dependency audit
        run: |
          npm audit --audit-level=moderate
          pnpm audit --audit-level=moderate
      
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan]
    
    strategy:
      matrix:
        environment: [development, staging, production]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build application
        run: pnpm run build:${{ matrix.environment }}
        env:
          NODE_ENV: ${{ matrix.environment }}
          NEXT_PUBLIC_APP_ENV: ${{ matrix.environment }}
      
      - name: Create build artifact
        run: |
          tar -czf build-${{ matrix.environment }}.tar.gz \
            .next \
            public \
            package.json \
            pnpm-lock.yaml \
            next.config.js
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.environment }}
          path: build-${{ matrix.environment }}.tar.gz
          retention-days: 7

  # Database Migrations
  database-migration:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Run database migrations
        run: |
          npx supabase db push --db-url ${{ secrets.DATABASE_URL }}
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
      
      - name: Verify migration success
        run: |
          npx supabase db lint --db-url ${{ secrets.DATABASE_URL }}

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, database-migration]
    if: github.ref == 'refs/heads/staging'
    environment:
      name: staging
      url: https://staging.jarvish.ai
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build-staging
      
      - name: Extract build
        run: tar -xzf build-staging.tar.gz
      
      - name: Deploy to Vercel (Staging)
        run: |
          npx vercel deploy --prod \
            --token=${{ secrets.VERCEL_TOKEN }} \
            --scope=${{ secrets.VERCEL_SCOPE }} \
            --env=staging
      
      - name: Run smoke tests
        run: |
          npx playwright test --config=playwright.config.staging.ts
      
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Staging deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, database-migration]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://jarvish.ai
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build-production
      
      - name: Extract build
        run: tar -xzf build-production.tar.gz
      
      - name: Create deployment backup
        run: |
          echo "Creating backup of current production deployment"
          # Backup logic here
      
      - name: Deploy to Vercel (Production)
        run: |
          npx vercel deploy --prod \
            --token=${{ secrets.VERCEL_TOKEN }} \
            --scope=${{ secrets.VERCEL_SCOPE }} \
            --env=production
      
      - name: Verify deployment health
        run: |
          for i in {1..10}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" https://jarvish.ai/api/health)
            if [ $response -eq 200 ]; then
              echo "Health check passed"
              exit 0
            fi
            echo "Health check attempt $i failed, retrying..."
            sleep 30
          done
          echo "Health checks failed"
          exit 1
      
      - name: Run production smoke tests
        run: |
          npx playwright test --config=playwright.config.production.ts
      
      - name: Update monitoring dashboards
        run: |
          curl -X POST https://api.datadoghq.com/api/v1/events \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
            -d '{
              "title": "Production Deployment",
              "text": "Version ${{ github.sha }} deployed to production",
              "tags": ["deployment", "production"],
              "alert_type": "info"
            }'
      
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        if: always()

  # Rollback on Failure
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: failure()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi
      
      - name: Rollback deployment
        run: |
          echo "Rolling back ${{ steps.env.outputs.environment }} deployment"
          # Rollback logic here
      
      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'failure'
          text: 'ALERT: Deployment rolled back for ${{ steps.env.outputs.environment }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          mention: 'channel'
          if_mention: failure

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/staging'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run load tests
        run: |
          npm install -g k6
          k6 run tests/load/api-load-test.js
      
      - name: Analyze performance results
        run: |
          # Analyze K6 results
          echo "Performance test results analysis"
      
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results/

  # Post-deployment validation
  post-deploy-validation:
    name: Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Verify SLA metrics
        run: |
          # Check if SLAs are being met
          response=$(curl -s https://jarvish.ai/api/metrics)
          # Parse and validate SLA compliance
      
      - name: Verify critical user flows
        run: |
          # Test critical user journeys
          npx playwright test tests/e2e/critical-flows.spec.ts
      
      - name: Create release notes
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Changes in this Release
            - Automated deployment from commit ${{ github.sha }}
            - Environment: Production
            - Deployment time: ${{ github.event.head_commit.timestamp }}
          draft: false
          prerelease: false